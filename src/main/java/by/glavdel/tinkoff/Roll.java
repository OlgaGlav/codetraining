package by.glavdel.tinkoff;


// Ваня принес на кухню рулет, который он хочет разделить с коллегами.
// Для этого он хочет разрезать рулет на  N равных частей.
// Разумеется, рулет можно резать только поперек. Соотвественно, Костя сделает N−1 разрез ножом через равные промежутки.
//
// По возвращению с кофе-брейка Ваня задумался — а можно ли было обойтись меньшим числом движений,
// будь нож Вани бесконечно длинным (иначе говоря, если он мог бы сделать сколько угодно разрезов за раз,
// если эти разрезы лежат на одной прямой)? Считается, что места для разрезов намечены заранее, и все разрезы делаются с ювелирной точностью.
//
// Оказывается, что можно.
// Например, если Ваня хотел бы разделить рулет на 4 части, он мог бы обойтись двумя разрезами — сначала он разделил бы рулет на две половинки,
// а потом совместил бы две половинки и разрезал обе пополам одновременно.
//
// Вам дано число N, требуется сказать, каким минимальным числом разрезов можно обойтись.
//
//Формат входных данных
// Дано одно натуральное число  N(1≤N≤2×10^9) —  количество людей на кофе-брйке.
//
//Формат выходных данных
// Выведите одно число — минимальное число движений, которое придется сделать Косте.
//
//Замечание
// Чтобы разрезать рулет на 6 частей,
// Ване сначала придется разрезать его на две равные части, после чего совместить две половинки и сделать два разреза.
// Чтобы разрезать рулет на 5 частей, Ване понадобится разделить его в соотношении 2:3,
// после чего совместить два рулета по левому краю и разрезать бОльший рулет на одинарные кусочки — меньший тоже разделится на одинарные.
//
//
//ВВод 6,   вывод 3
//ВВод 5,    вывод 3

import java.util.Scanner;

public class Roll {

    public static int quantityPart;

    public static void main(String[] args) {
        System.out.println("Input quantity part ");
        readQuantityPartFromConsole();
        int countCut = countCut();
        System.out.println(countCut);
    }

    private static int countCut() {
        int count = 1;
        if (quantityPart % 2 != 0) {
            quantityPart++;
        }
        while (quantityPart % 2 == 0) {
            count++;
            quantityPart = quantityPart / 2;
        }
        return count + quantityPart % 2;
    }

    private static void readQuantityPartFromConsole() {
        Scanner scanner = new Scanner(System.in);
        quantityPart = scanner.nextInt();
    }
}

